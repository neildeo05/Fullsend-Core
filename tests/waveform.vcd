$version Generated by VerilatedVcd $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 g clk $end
  $var wire 32 i reg_array[0] [31:0] $end
  $var wire 32 s reg_array[10] [31:0] $end
  $var wire 32 t reg_array[11] [31:0] $end
  $var wire 32 u reg_array[12] [31:0] $end
  $var wire 32 v reg_array[13] [31:0] $end
  $var wire 32 w reg_array[14] [31:0] $end
  $var wire 32 x reg_array[15] [31:0] $end
  $var wire 32 y reg_array[16] [31:0] $end
  $var wire 32 z reg_array[17] [31:0] $end
  $var wire 32 { reg_array[18] [31:0] $end
  $var wire 32 | reg_array[19] [31:0] $end
  $var wire 32 j reg_array[1] [31:0] $end
  $var wire 32 } reg_array[20] [31:0] $end
  $var wire 32 ~ reg_array[21] [31:0] $end
  $var wire 32 !! reg_array[22] [31:0] $end
  $var wire 32 "! reg_array[23] [31:0] $end
  $var wire 32 #! reg_array[24] [31:0] $end
  $var wire 32 $! reg_array[25] [31:0] $end
  $var wire 32 %! reg_array[26] [31:0] $end
  $var wire 32 &! reg_array[27] [31:0] $end
  $var wire 32 '! reg_array[28] [31:0] $end
  $var wire 32 (! reg_array[29] [31:0] $end
  $var wire 32 k reg_array[2] [31:0] $end
  $var wire 32 )! reg_array[30] [31:0] $end
  $var wire 32 *! reg_array[31] [31:0] $end
  $var wire 32 l reg_array[3] [31:0] $end
  $var wire 32 m reg_array[4] [31:0] $end
  $var wire 32 n reg_array[5] [31:0] $end
  $var wire 32 o reg_array[6] [31:0] $end
  $var wire 32 p reg_array[7] [31:0] $end
  $var wire 32 q reg_array[8] [31:0] $end
  $var wire 32 r reg_array[9] [31:0] $end
  $var wire  1 h reset $end
  $scope module Core $end
   $var wire  4 W alu_op [3:0] $end
   $var wire  1 S branch_inst $end
   $var wire  1 g clk $end
   $var wire  4 + current_func [3:0] $end
   $var wire  7 * current_opcode [6:0] $end
   $var wire  1 U ex_load_inst $end
   $var wire  1 V ex_reg_dest $end
   $var wire  1 9 load_inst $end
   $var wire 32 i reg_array[0] [31:0] $end
   $var wire 32 s reg_array[10] [31:0] $end
   $var wire 32 t reg_array[11] [31:0] $end
   $var wire 32 u reg_array[12] [31:0] $end
   $var wire 32 v reg_array[13] [31:0] $end
   $var wire 32 w reg_array[14] [31:0] $end
   $var wire 32 x reg_array[15] [31:0] $end
   $var wire 32 y reg_array[16] [31:0] $end
   $var wire 32 z reg_array[17] [31:0] $end
   $var wire 32 { reg_array[18] [31:0] $end
   $var wire 32 | reg_array[19] [31:0] $end
   $var wire 32 j reg_array[1] [31:0] $end
   $var wire 32 } reg_array[20] [31:0] $end
   $var wire 32 ~ reg_array[21] [31:0] $end
   $var wire 32 !! reg_array[22] [31:0] $end
   $var wire 32 "! reg_array[23] [31:0] $end
   $var wire 32 #! reg_array[24] [31:0] $end
   $var wire 32 $! reg_array[25] [31:0] $end
   $var wire 32 %! reg_array[26] [31:0] $end
   $var wire 32 &! reg_array[27] [31:0] $end
   $var wire 32 '! reg_array[28] [31:0] $end
   $var wire 32 (! reg_array[29] [31:0] $end
   $var wire 32 k reg_array[2] [31:0] $end
   $var wire 32 )! reg_array[30] [31:0] $end
   $var wire 32 *! reg_array[31] [31:0] $end
   $var wire 32 l reg_array[3] [31:0] $end
   $var wire 32 m reg_array[4] [31:0] $end
   $var wire 32 n reg_array[5] [31:0] $end
   $var wire 32 o reg_array[6] [31:0] $end
   $var wire 32 p reg_array[7] [31:0] $end
   $var wire 32 q reg_array[8] [31:0] $end
   $var wire 32 r reg_array[9] [31:0] $end
   $var wire  1 : reg_dest $end
   $var wire  1 T reg_reg_inst $end
   $var wire  1 h reset $end
   $scope module cu $end
    $var wire  4 W alu_op [3:0] $end
    $var wire  1 S branch_inst $end
    $var wire  1 g clk $end
    $var wire  4 + current_func [3:0] $end
    $var wire  7 * current_opcode [6:0] $end
    $var wire  1 U ex_load_inst $end
    $var wire  1 V ex_reg_dest $end
    $var wire  1 9 load_inst $end
    $var wire  1 : reg_dest $end
    $var wire  1 T reg_reg_inst $end
    $var wire  1 h reset $end
   $upscope $end
   $scope module dp $end
    $var wire  4 W alu_op [3:0] $end
    $var wire  1 S branch_inst $end
    $var wire  1 .! branch_taken $end
    $var wire  1 g clk $end
    $var wire  4 + current_func [3:0] $end
    $var wire  7 * current_opcode [6:0] $end
    $var wire  1 E enable $end
    $var wire  1 U ex_load_inst $end
    $var wire 32 ; ex_mem[0] [31:0] $end
    $var wire 32 < ex_mem[1] [31:0] $end
    $var wire 32 = ex_mem[2] [31:0] $end
    $var wire 32 > ex_mem[3] [31:0] $end
    $var wire  1 V ex_reg_dest $end
    $var wire  1 _ f_en $end
    $var wire  1 Y f_rs1[0] $end
    $var wire  1 Z f_rs1[1] $end
    $var wire  1 [ f_rs2[0] $end
    $var wire  1 \ f_rs2[1] $end
    $var wire 32 ] fwd_1 [31:0] $end
    $var wire 32 ^ fwd_2 [31:0] $end
    $var wire 32 , id_ex[0] [31:0] $end
    $var wire 32 - id_ex[1] [31:0] $end
    $var wire 32 . id_ex[2] [31:0] $end
    $var wire 32 / id_ex[3] [31:0] $end
    $var wire 32 0 id_ex[4] [31:0] $end
    $var wire 32 # if_id[0] [31:0] $end
    $var wire 32 $ if_id[1] [31:0] $end
    $var wire  1 9 load_inst $end
    $var wire 32 ? mem_wb[0] [31:0] $end
    $var wire 32 @ mem_wb[1] [31:0] $end
    $var wire 32 A mem_wb[2] [31:0] $end
    $var wire 32 B mem_wb[3] [31:0] $end
    $var wire 32 C mem_wb[4] [31:0] $end
    $var wire 32 /! pc_offset_branch [31:0] $end
    $var wire 32 i reg_array[0] [31:0] $end
    $var wire 32 s reg_array[10] [31:0] $end
    $var wire 32 t reg_array[11] [31:0] $end
    $var wire 32 u reg_array[12] [31:0] $end
    $var wire 32 v reg_array[13] [31:0] $end
    $var wire 32 w reg_array[14] [31:0] $end
    $var wire 32 x reg_array[15] [31:0] $end
    $var wire 32 y reg_array[16] [31:0] $end
    $var wire 32 z reg_array[17] [31:0] $end
    $var wire 32 { reg_array[18] [31:0] $end
    $var wire 32 | reg_array[19] [31:0] $end
    $var wire 32 j reg_array[1] [31:0] $end
    $var wire 32 } reg_array[20] [31:0] $end
    $var wire 32 ~ reg_array[21] [31:0] $end
    $var wire 32 !! reg_array[22] [31:0] $end
    $var wire 32 "! reg_array[23] [31:0] $end
    $var wire 32 #! reg_array[24] [31:0] $end
    $var wire 32 $! reg_array[25] [31:0] $end
    $var wire 32 %! reg_array[26] [31:0] $end
    $var wire 32 &! reg_array[27] [31:0] $end
    $var wire 32 '! reg_array[28] [31:0] $end
    $var wire 32 (! reg_array[29] [31:0] $end
    $var wire 32 k reg_array[2] [31:0] $end
    $var wire 32 )! reg_array[30] [31:0] $end
    $var wire 32 *! reg_array[31] [31:0] $end
    $var wire 32 l reg_array[3] [31:0] $end
    $var wire 32 m reg_array[4] [31:0] $end
    $var wire 32 n reg_array[5] [31:0] $end
    $var wire 32 o reg_array[6] [31:0] $end
    $var wire 32 p reg_array[7] [31:0] $end
    $var wire 32 q reg_array[8] [31:0] $end
    $var wire 32 r reg_array[9] [31:0] $end
    $var wire  1 : reg_dest $end
    $var wire  1 2! reg_r_w $end
    $var wire  1 T reg_reg_inst $end
    $var wire  5 0! reg_wa [4:0] $end
    $var wire  1 h reset $end
    $var wire  1 X stall $end
    $var wire  2 % stall_counter [1:0] $end
    $var wire 32 1! wa_data [31:0] $end
    $var wire 32 D write_back [31:0] $end
    $scope module fu $end
     $var wire 32 H ex_aluout [31:0] $end
     $var wire 32 G ex_mem_ir [31:0] $end
     $var wire  7 L ex_op [6:0] $end
     $var wire  4 M ex_rd [3:0] $end
     $var wire  1 ` ex_rs1_forward $end
     $var wire  1 a ex_rs2_forward $end
     $var wire  1 _ f_en $end
     $var wire  1 Y f_rs1[0] $end
     $var wire  1 Z f_rs1[1] $end
     $var wire  1 [ f_rs2[0] $end
     $var wire  1 \ f_rs2[1] $end
     $var wire 32 ] fwd_1 [31:0] $end
     $var wire 32 ^ fwd_2 [31:0] $end
     $var wire 32 1 id_ex_ir [31:0] $end
     $var wire  7 * id_op [6:0] $end
     $var wire  4 2 id_rs1 [3:0] $end
     $var wire  4 3 id_rs2 [3:0] $end
     $var wire 32 I mem_aluout [31:0] $end
     $var wire 32 J mem_memout [31:0] $end
     $var wire  7 K mem_op [6:0] $end
     $var wire  4 N mem_rd [3:0] $end
     $var wire  1 b mem_rs1_forward $end
     $var wire  1 c mem_rs2_forward $end
     $var wire 32 F mem_wb_ir [31:0] $end
    $upscope $end
    $scope module regs $end
     $var wire  1 g clk $end
     $var wire  1 E neg_enable $end
     $var wire 32 +! ra_data [31:0] $end
     $var wire 32 ,! rb_data [31:0] $end
     $var wire  5 4 reg_a [4:0] $end
     $var wire 32 i reg_array[0] [31:0] $end
     $var wire 32 s reg_array[10] [31:0] $end
     $var wire 32 t reg_array[11] [31:0] $end
     $var wire 32 u reg_array[12] [31:0] $end
     $var wire 32 v reg_array[13] [31:0] $end
     $var wire 32 w reg_array[14] [31:0] $end
     $var wire 32 x reg_array[15] [31:0] $end
     $var wire 32 y reg_array[16] [31:0] $end
     $var wire 32 z reg_array[17] [31:0] $end
     $var wire 32 { reg_array[18] [31:0] $end
     $var wire 32 | reg_array[19] [31:0] $end
     $var wire 32 j reg_array[1] [31:0] $end
     $var wire 32 } reg_array[20] [31:0] $end
     $var wire 32 ~ reg_array[21] [31:0] $end
     $var wire 32 !! reg_array[22] [31:0] $end
     $var wire 32 "! reg_array[23] [31:0] $end
     $var wire 32 #! reg_array[24] [31:0] $end
     $var wire 32 $! reg_array[25] [31:0] $end
     $var wire 32 %! reg_array[26] [31:0] $end
     $var wire 32 &! reg_array[27] [31:0] $end
     $var wire 32 '! reg_array[28] [31:0] $end
     $var wire 32 (! reg_array[29] [31:0] $end
     $var wire 32 k reg_array[2] [31:0] $end
     $var wire 32 )! reg_array[30] [31:0] $end
     $var wire 32 *! reg_array[31] [31:0] $end
     $var wire 32 l reg_array[3] [31:0] $end
     $var wire 32 m reg_array[4] [31:0] $end
     $var wire 32 n reg_array[5] [31:0] $end
     $var wire 32 o reg_array[6] [31:0] $end
     $var wire 32 p reg_array[7] [31:0] $end
     $var wire 32 q reg_array[8] [31:0] $end
     $var wire 32 r reg_array[9] [31:0] $end
     $var wire  5 5 reg_b [4:0] $end
     $var wire  1 2! reg_r_w $end
     $var wire  5 O reg_wa [4:0] $end
     $var wire  1 h reset $end
     $var wire 32 P wa_data [31:0] $end
    $upscope $end
    $scope module s1 $end
     $var wire  1 Q branch_cond $end
     $var wire  1 g clk $end
     $var wire  1 X hazard $end
     $var wire 32 # if_id[0] [31:0] $end
     $var wire 32 $ if_id[1] [31:0] $end
     $var wire 32 ( ir [31:0] $end
     $var wire 32 ' npc [31:0] $end
     $var wire 32 & pc [31:0] $end
     $var wire 32 H pc_offset_branch [31:0] $end
     $var wire  1 h reset $end
     $var wire  2 % stall_counter [1:0] $end
     $scope module mem $end
      $var wire 32 & address [31:0] $end
      $var wire 32 ( read_out [31:0] $end
     $upscope $end
    $upscope $end
    $scope module s2 $end
     $var wire  1 g clk $end
     $var wire  1 X hazard $end
     $var wire 32 , id_ex[0] [31:0] $end
     $var wire 32 - id_ex[1] [31:0] $end
     $var wire 32 . id_ex[2] [31:0] $end
     $var wire 32 / id_ex[3] [31:0] $end
     $var wire 32 0 id_ex[4] [31:0] $end
     $var wire 32 ( if_id_ir [31:0] $end
     $var wire 32 ' if_id_npc [31:0] $end
     $var wire  1 h reset $end
    $upscope $end
    $scope module s3 $end
     $var wire 32 d alu_a [31:0] $end
     $var wire 32 e alu_b [31:0] $end
     $var wire  4 W alu_op [3:0] $end
     $var wire 32 f alu_out [31:0] $end
     $var wire  1 S branch_inst $end
     $var wire  1 g clk $end
     $var wire  1 U ex_load_inst $end
     $var wire 32 ; ex_mem[0] [31:0] $end
     $var wire 32 < ex_mem[1] [31:0] $end
     $var wire 32 = ex_mem[2] [31:0] $end
     $var wire 32 > ex_mem[3] [31:0] $end
     $var wire  1 V ex_reg_dest $end
     $var wire  1 _ f_en $end
     $var wire  1 Y f_rs1[0] $end
     $var wire  1 Z f_rs1[1] $end
     $var wire  1 [ f_rs2[0] $end
     $var wire  1 \ f_rs2[1] $end
     $var wire 32 ] fwd_1 [31:0] $end
     $var wire 32 ^ fwd_2 [31:0] $end
     $var wire 32 +! id_ex_a [31:0] $end
     $var wire 32 ,! id_ex_b [31:0] $end
     $var wire 32 7 id_ex_imm [31:0] $end
     $var wire 32 1 id_ex_ir [31:0] $end
     $var wire 32 6 id_ex_npc [31:0] $end
     $var wire 32 -! reg_b_out [31:0] $end
     $var wire  1 T reg_reg_inst $end
     $var wire  1 h reset $end
     $scope module alu $end
      $var wire 32 d alu_a [31:0] $end
      $var wire 32 e alu_b [31:0] $end
      $var wire  4 W alu_op [3:0] $end
      $var wire 32 f alu_out [31:0] $end
     $upscope $end
    $upscope $end
    $scope module s4 $end
     $var wire  1 g clk $end
     $var wire 32 H ex_mem_alu_output [31:0] $end
     $var wire 32 R ex_mem_b [31:0] $end
     $var wire 32 G ex_mem_ir [31:0] $end
     $var wire  1 9 load_inst $end
     $var wire 32 ? mem_wb[0] [31:0] $end
     $var wire 32 @ mem_wb[1] [31:0] $end
     $var wire 32 A mem_wb[2] [31:0] $end
     $var wire 32 B mem_wb[3] [31:0] $end
     $var wire 32 C mem_wb[4] [31:0] $end
     $var wire  1 : reg_dest $end
     $var wire  1 h reset $end
     $scope module dm $end
      $var wire 32 H address [31:0] $end
      $var wire  1 g clk $end
      $var wire  1 9 en $end
      $var wire 32 R in [31:0] $end
      $var wire 32 J out [31:0] $end
      $var wire  1 : r_w $end
     $upscope $end
    $upscope $end
    $scope module su $end
     $var wire 32 1 id_ex_ir [31:0] $end
     $var wire  4 8 id_ex_rd [3:0] $end
     $var wire 32 ( if_id_ir [31:0] $end
     $var wire  4 ) if_id_rs1 [3:0] $end
     $var wire  1 X stall $end
     $var wire  2 % stall_counter [1:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#8
b00000000000000000000000000000000 #
b00000000000000000000000000000000 $
b00 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b0000 )
b0000000 *
b0000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b0000 2
b0000 3
b00000 4
b00000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b0000 8
09
0:
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
0E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b0000000 K
b0000000 L
b0000 M
b0000 N
b00000 O
b00000000000000000000000000000000 P
0Q
b00000000000000000000000000000000 R
0S
0T
0U
0V
b0000 W
0X
0Y
0Z
0[
0\
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
0_
0`
0a
0b
0c
b00000000000000000000000000000000 d
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
0g
0h
b00000000000000000000000000000000 i
b00000000000000000000000000000000 j
b00000000000000000000000000000000 k
b00000000000000000000000000000000 l
b00000000000000000000000000000000 m
b00000000000000000000000000000000 n
b00000000000000000000000000000000 o
b00000000000000000000000000000000 p
b00000000000000000000000000000000 q
b00000000000000000000000000000000 r
b00000000000000000000000000000000 s
b00000000000000000000000000000000 t
b00000000000000000000000000000000 u
b00000000000000000000000000000000 v
b00000000000000000000000000000000 w
b00000000000000000000000000000000 x
b00000000000000000000000000000000 y
b00000000000000000000000000000000 z
b00000000000000000000000000000000 {
b00000000000000000000000000000000 |
b00000000000000000000000000000000 }
b00000000000000000000000000000000 ~
b00000000000000000000000000000000 !!
b00000000000000000000000000000000 "!
b00000000000000000000000000000000 #!
b00000000000000000000000000000000 $!
b00000000000000000000000000000000 %!
b00000000000000000000000000000000 &!
b00000000000000000000000000000000 '!
b00000000000000000000000000000000 (!
b00000000000000000000000000000000 )!
b00000000000000000000000000000000 *!
b00000000000000000000000000000000 +!
b00000000000000000000000000000000 ,!
b00000000000000000000000000000000 -!
0.!
b00000000000000000000000000000000 /!
b00000 0!
b00000000000000000000000000000000 1!
02!
#10
b00000000011000000000001100010011 #
b00000000000000000000000000000001 $
b00000000000000000000000000000001 &
b00000000000000000000000000000001 '
b00000000011000000000001100010011 (
1g
#15
0g
#18
#20
b00000000000000110000010000110011 #
b00000000000000000000000000000010 $
b00000000000000000000000000000010 &
b00000000000000000000000000000010 '
b00000000000000110000010000110011 (
b0110 )
b0010011 *
b00000000000000000000000000000001 .
b00000000011000000000001100010011 /
b00000000000000000000000000000110 0
b00000000011000000000001100010011 1
b0110 3
b00110 5
b00000000000000000000000000000001 6
b00000000000000000000000000000110 7
b0110 8
b0001 W
b00000000000000000000000000000110 e
b00000000000000000000000000000110 f
1g
#25
0g
#28
#30
b00000000011000000000001100010011 #
b00000000000000000000000000000011 $
b00000000000000000000000000000011 &
b00000000000000000000000000000011 '
b00000000011000000000001100010011 (
b0000 )
b0110011 *
b00000000000000000000000000000010 .
b00000000000000110000010000110011 /
b00000000000000000000000000000000 0
b00000000000000110000010000110011 1
b0110 2
b0000 3
b00110 4
b00000 5
b00000000000000000000000000000010 6
b00000000000000000000000000000000 7
b1000 8
b00000000011000000000001100010011 ;
b00000000000000000000000000000110 =
b00000000011000000000001100010011 G
b00000000000000000000000000000110 H
b0010011 L
b0110 M
1T
1Y
b00000000000000000000000000000110 ]
1_
1`
b00000000000000000000000000000110 d
b00000000000000000000000000000000 e
1g
#35
0g
#38
#40
b00000000011100000000001110010011 #
b00000000000000000000000000000100 $
b00000000000000000000000000000100 &
b00000000000000000000000000000100 '
b00000000011100000000001110010011 (
b0010011 *
b00000000000000000000000000000011 .
b00000000011000000000001100010011 /
b00000000000000000000000000000110 0
b00000000011000000000001100010011 1
b0000 2
b0110 3
b00000 4
b00110 5
b00000000000000000000000000000011 6
b00000000000000000000000000000110 7
b0110 8
b00000000000000110000010000110011 ;
b00000000011000000000001100010011 ?
b00000000000000000000000000000110 @
b00000000000000000000000000000110 D
b00000000011000000000001100010011 F
b00000000000000110000010000110011 G
b00000000000000000000000000000110 I
b0010011 K
b0110011 L
b1000 M
b0110 N
b00110 O
b00000000000000000000000000000110 P
0T
0Y
b00000000000000000000000000000000 ]
0_
0`
b00000000000000000000000000000000 d
b00000000000000000000000000000110 e
1g
#45
0g
#48
#50
b00000000011100110000001100110011 #
b00000000000000000000000000000101 $
b00000000000000000000000000000101 &
b00000000000000000000000000000101 '
b00000000011100110000001100110011 (
b0110 )
b00000000000000000000000000000100 .
b00000000011100000000001110010011 /
b00000000000000000000000000000111 0
b00000000011100000000001110010011 1
b0111 3
b00111 5
b00000000000000000000000000000100 6
b00000000000000000000000000000111 7
b0111 8
b00000000011000000000001100010011 ;
b00000000000000110000010000110011 ?
b00000000000000110000010000110011 F
b00000000011000000000001100010011 G
b0110011 K
b0010011 L
b0110 M
b1000 N
b01000 O
b00000000000000000000000000000111 e
b00000000000000000000000000000111 f
1g
b00000000000000000000000000000110 o
#55
0g
#58
#60
b00000000000100000000000010010011 #
b00000000000000000000000000000110 $
b00000000000000000000000000000110 &
b00000000000000000000000000000110 '
b00000000000100000000000010010011 (
b0000 )
b0110011 *
b00000000000000000000000000000101 .
b00000000011100110000001100110011 /
b00000000011100110000001100110011 1
b0110 2
b00110 4
b00000000000000000000000000000101 6
b0110 8
b00000000011100000000001110010011 ;
b00000000000000000000000000000111 =
b00000000011000000000001100010011 ?
b00000000011000000000001100010011 F
b00000000011100000000001110010011 G
b00000000000000000000000000000111 H
b0010011 K
b0111 M
b0110 N
b00110 O
1T
1Z
1[
b00000000000000000000000000000110 ]
b00000000000000000000000000000111 ^
1_
1a
1b
b00000000000000000000000000000110 d
b00000000000000000000000000001101 f
1g
b00000000000000000000000000000110 q
b00000000000000000000000000000111 -!
#65
b00000000000000000000000000000110 ,
0g
b00000000000000000000000000000110 +!
#68
#70
b00000000001000001000000010010011 #
b00000000000000000000000000000111 $
b00000000000000000000000000000111 &
b00000000000000000000000000000111 '
b00000000001000001000000010010011 (
b0001 )
b0010011 *
b00000000000000000000000000000110 .
b00000000000100000000000010010011 /
b00000000000000000000000000000001 0
b00000000000100000000000010010011 1
b0000 2
b0001 3
b00000 4
b00001 5
b00000000000000000000000000000110 6
b00000000000000000000000000000001 7
b0001 8
b00000000011100110000001100110011 ;
b00000000000000000000000000001101 =
b00000000000000000000000000000111 >
b00000000011100000000001110010011 ?
b00000000000000000000000000000111 @
b00000000000000000000000000000111 D
b00000000011100000000001110010011 F
b00000000011100110000001100110011 G
b00000000000000000000000000001101 H
b00000000000000000000000000000111 I
b0110011 L
b0110 M
b0111 N
b00111 O
b00000000000000000000000000000111 P
b00000000000000000000000000000111 R
0T
0Z
0[
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
0_
0a
0b
b00000000000000000000000000000001 e
b00000000000000000000000000000111 f
1g
b00000000000000000000000000000000 -!
#75
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 d
b00000000000000000000000000000001 f
0g
b00000000000000000000000000000000 +!
#78
#80
b01000000000100011000001000110011 #
b00000000000000000000000000001000 $
b00000000000000000000000000001000 &
b00000000000000000000000000001000 '
b01000000000100011000001000110011 (
b0011 )
b00000000000000000000000000000111 .
b00000000001000001000000010010011 /
b00000000000000000000000000000010 0
b00000000001000001000000010010011 1
b0001 2
b0010 3
b00001 4
b00010 5
b00000000000000000000000000000111 6
b00000000000000000000000000000010 7
b00000000000100000000000010010011 ;
b00000000000000000000000000000001 =
b00000000000000000000000000000000 >
b00000000011100110000001100110011 ?
b00000000000000000000000000001101 @
b00000000000000000000000000001101 D
b00000000011100110000001100110011 F
b00000000000100000000000010010011 G
b00000000000000000000000000000001 H
b00000000000000000000000000001101 I
b0110011 K
b0010011 L
b0001 M
b0110 N
b00110 O
b00000000000000000000000000001101 P
b00000000000000000000000000000000 R
1Y
b00000000000000000000000000000001 ]
1_
1`
b00000000000000000000000000000001 d
b00000000000000000000000000000010 e
b00000000000000000000000000000011 f
1g
b00000000000000000000000000000111 p
#85
0g
#88
#90
b00000000000000000000000000000000 #
b00000000000000000000000000001001 $
b00000000000000000000000000001001 &
b00000000000000000000000000001001 '
b00000000000000000000000000000000 (
b0000 )
b0110011 *
b1000 +
b00000000000000000000000000001000 .
b01000000000100011000001000110011 /
b00000000000000000000010000000001 0
b01000000000100011000001000110011 1
b0011 2
b0001 3
b00011 4
b00001 5
b00000000000000000000000000001000 6
b00000000000000000000010000000001 7
b0100 8
b00000000001000001000000010010011 ;
b00000000000000000000000000000011 =
b00000000000100000000000010010011 ?
b00000000000000000000000000000001 @
b00000000000000000000000000000001 D
b00000000000100000000000010010011 F
b00000000001000001000000010010011 G
b00000000000000000000000000000011 H
b00000000000000000000000000000001 I
b0010011 K
b0001 N
b00001 O
b00000000000000000000000000000001 P
1T
b0010 W
0Y
1[
1\
b00000000000000000000000000000000 ]
b00000000000000000000000000000011 ^
0`
1a
1c
b00000000000000000000000000000000 d
b00000000000000000000000000000011 e
b11111111111111111111111111111101 f
1g
b00000000000000000000000000001101 o
b00000000000000000000000000000011 -!
#95
0g
#98
#100
b00000000000000000000000000001010 $
b00000000000000000000000000001010 &
b00000000000000000000000000001010 '
b0000000 *
b0000 +
b00000000000000000000000000001001 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b0000 2
b0000 3
b00000 4
b00000 5
b00000000000000000000000000001001 6
b00000000000000000000000000000000 7
b0000 8
b01000000000100011000001000110011 ;
b11111111111111111111111111111101 =
b00000000000000000000000000000011 >
b00000000001000001000000010010011 ?
b00000000000000000000000000000011 @
b00000000000000000000000000000011 D
b00000000001000001000000010010011 F
b01000000000100011000001000110011 G
b11111111111111111111111111111101 H
b00000000000000000000000000000011 I
b0110011 L
b0100 M
b00000000000000000000000000000011 P
b00000000000000000000000000000011 R
0T
b0000 W
0[
0\
b00000000000000000000000000000000 ^
0_
0a
0c
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
1g
b00000000000000000000000000000001 j
b00000000000000000000000000000000 -!
#105
0g
#108
#110
b00000000000000000000000000001011 $
b00000000000000000000000000001011 &
b00000000000000000000000000001011 '
b00000000000000000000000000001010 .
b00000000000000000000000000001010 6
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b01000000000100011000001000110011 ?
b11111111111111111111111111111101 @
b11111111111111111111111111111101 D
b01000000000100011000001000110011 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b11111111111111111111111111111101 I
b0110011 K
b0000000 L
b0000 M
b0100 N
b00100 O
b11111111111111111111111111111101 P
b00000000000000000000000000000000 R
1g
b00000000000000000000000000000011 j
#115
0g
#118
#120
b00000000000000000000000000001100 $
b00000000000000000000000000001100 &
b00000000000000000000000000001100 '
b00000000000000000000000000001011 .
b00000000000000000000000000001011 6
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 D
b00000000000000000000000000000000 F
b00000000000000000000000000000000 I
b0000000 K
b0000 N
b00000 O
b00000000000000000000000000000000 P
1g
b11111111111111111111111111111101 m
#125
0g
#128
#130
b00000000000000000000000000001101 $
b00000000000000000000000000001101 &
b00000000000000000000000000001101 '
b00000000000000000000000000001100 .
b00000000000000000000000000001100 6
1g
#135
0g
#138
#140
b00000000000000000000000000001110 $
b00000000000000000000000000001110 &
b00000000000000000000000000001110 '
b00000000000000000000000000001101 .
b00000000000000000000000000001101 6
1g
#145
0g
#148
#150
b00000000000000000000000000001111 $
b00000000000000000000000000001111 &
b00000000000000000000000000001111 '
b00000000000000000000000000001110 .
b00000000000000000000000000001110 6
1g
#155
0g
#158
#160
b00000000000000000000000000010000 $
b00000000000000000000000000010000 &
b00000000000000000000000000010000 '
b00000000000000000000000000001111 .
b00000000000000000000000000001111 6
1g
#165
0g
#168
#170
b00000000000000000000000000010001 $
b00000000000000000000000000010001 &
b00000000000000000000000000010001 '
b00000000000000000000000000010000 .
b00000000000000000000000000010000 6
1g
#175
0g
#178
#180
b00000000000000000000000000010010 $
b00000000000000000000000000010010 &
b00000000000000000000000000010010 '
b00000000000000000000000000010001 .
b00000000000000000000000000010001 6
1g
#185
0g
#188
#190
b00000000000000000000000000010011 $
b00000000000000000000000000010011 &
b00000000000000000000000000010011 '
b00000000000000000000000000010010 .
b00000000000000000000000000010010 6
1g
#195
0g
#198
#200
b00000000000000000000000000010100 $
b00000000000000000000000000010100 &
b00000000000000000000000000010100 '
b00000000000000000000000000010011 .
b00000000000000000000000000010011 6
1g
#205
0g
#208
#210
b00000000000000000000000000010101 $
b00000000000000000000000000010101 &
b00000000000000000000000000010101 '
b00000000000000000000000000010100 .
b00000000000000000000000000010100 6
1g
#215
0g
#218
#220
b00000000000000000000000000010110 $
b00000000000000000000000000010110 &
b00000000000000000000000000010110 '
b00000000000000000000000000010101 .
b00000000000000000000000000010101 6
1g
#225
0g
#228
#230
b00000000000000000000000000010111 $
b00000000000000000000000000010111 &
b00000000000000000000000000010111 '
b00000000000000000000000000010110 .
b00000000000000000000000000010110 6
1g
#235
0g
#238
#240
b00000000000000000000000000011000 $
b00000000000000000000000000011000 &
b00000000000000000000000000011000 '
b00000000000000000000000000010111 .
b00000000000000000000000000010111 6
1g
#245
0g
#248
#250
b00000000000000000000000000011001 $
b00000000000000000000000000011001 &
b00000000000000000000000000011001 '
b00000000000000000000000000011000 .
b00000000000000000000000000011000 6
1g
#255
0g
#258
#260
b00000000000000000000000000011010 $
b00000000000000000000000000011010 &
b00000000000000000000000000011010 '
b00000000000000000000000000011001 .
b00000000000000000000000000011001 6
1g
#265
0g
#268
#270
b00000000000000000000000000011011 $
b00000000000000000000000000011011 &
b00000000000000000000000000011011 '
b00000000000000000000000000011010 .
b00000000000000000000000000011010 6
1g
#275
0g
#278
#280
b00000000000000000000000000011100 $
b00000000000000000000000000011100 &
b00000000000000000000000000011100 '
b00000000000000000000000000011011 .
b00000000000000000000000000011011 6
1g
#285
0g
#288
#290
b00000000000000000000000000011101 $
b00000000000000000000000000011101 &
b00000000000000000000000000011101 '
b00000000000000000000000000011100 .
b00000000000000000000000000011100 6
1g
#295
0g
#298
#300
b00000000000000000000000000011110 $
b00000000000000000000000000011110 &
b00000000000000000000000000011110 '
b00000000000000000000000000011101 .
b00000000000000000000000000011101 6
1g
#305
0g
#308
#310
b00000000000000000000000000011111 $
b00000000000000000000000000011111 &
b00000000000000000000000000011111 '
b00000000000000000000000000011110 .
b00000000000000000000000000011110 6
1g
#315
0g
#318
#320
b00000000000000000000000000100000 $
b00000000000000000000000000100000 &
b00000000000000000000000000100000 '
b00000000000000000000000000011111 .
b00000000000000000000000000011111 6
1g
#325
0g
#328
#330
b00000000000000000000000000100001 $
b00000000000000000000000000100001 &
b00000000000000000000000000100001 '
b00000000000000000000000000100000 .
b00000000000000000000000000100000 6
1g
#335
0g
#338
#340
b00000000000000000000000000100010 $
b00000000000000000000000000100010 &
b00000000000000000000000000100010 '
b00000000000000000000000000100001 .
b00000000000000000000000000100001 6
1g
#345
0g
#348
#350
b00000000000000000000000000100011 $
b00000000000000000000000000100011 &
b00000000000000000000000000100011 '
b00000000000000000000000000100010 .
b00000000000000000000000000100010 6
1g
#355
0g
#358
#360
b00000000000000000000000000100100 $
b00000000000000000000000000100100 &
b00000000000000000000000000100100 '
b00000000000000000000000000100011 .
b00000000000000000000000000100011 6
1g
#365
0g
#368
#370
b00000000000000000000000000100101 $
b00000000000000000000000000100101 &
b00000000000000000000000000100101 '
b00000000000000000000000000100100 .
b00000000000000000000000000100100 6
1g
#375
0g
#378
#380
b00000000000000000000000000100110 $
b00000000000000000000000000100110 &
b00000000000000000000000000100110 '
b00000000000000000000000000100101 .
b00000000000000000000000000100101 6
1g
#385
0g
#388
#390
b00000000000000000000000000100111 $
b00000000000000000000000000100111 &
b00000000000000000000000000100111 '
b00000000000000000000000000100110 .
b00000000000000000000000000100110 6
1g
#395
0g
#398
#400
b00000000000000000000000000101000 $
b00000000000000000000000000101000 &
b00000000000000000000000000101000 '
b00000000000000000000000000100111 .
b00000000000000000000000000100111 6
1g
#405
0g
