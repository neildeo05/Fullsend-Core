$version Generated by VerilatedVcd $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 s clk $end
  $var wire 32 u reg_array[0] [31:0] $end
  $var wire 32 !! reg_array[10] [31:0] $end
  $var wire 32 "! reg_array[11] [31:0] $end
  $var wire 32 #! reg_array[12] [31:0] $end
  $var wire 32 $! reg_array[13] [31:0] $end
  $var wire 32 %! reg_array[14] [31:0] $end
  $var wire 32 &! reg_array[15] [31:0] $end
  $var wire 32 '! reg_array[16] [31:0] $end
  $var wire 32 (! reg_array[17] [31:0] $end
  $var wire 32 )! reg_array[18] [31:0] $end
  $var wire 32 *! reg_array[19] [31:0] $end
  $var wire 32 v reg_array[1] [31:0] $end
  $var wire 32 +! reg_array[20] [31:0] $end
  $var wire 32 ,! reg_array[21] [31:0] $end
  $var wire 32 -! reg_array[22] [31:0] $end
  $var wire 32 .! reg_array[23] [31:0] $end
  $var wire 32 /! reg_array[24] [31:0] $end
  $var wire 32 0! reg_array[25] [31:0] $end
  $var wire 32 1! reg_array[26] [31:0] $end
  $var wire 32 2! reg_array[27] [31:0] $end
  $var wire 32 3! reg_array[28] [31:0] $end
  $var wire 32 4! reg_array[29] [31:0] $end
  $var wire 32 w reg_array[2] [31:0] $end
  $var wire 32 5! reg_array[30] [31:0] $end
  $var wire 32 6! reg_array[31] [31:0] $end
  $var wire 32 x reg_array[3] [31:0] $end
  $var wire 32 y reg_array[4] [31:0] $end
  $var wire 32 z reg_array[5] [31:0] $end
  $var wire 32 { reg_array[6] [31:0] $end
  $var wire 32 | reg_array[7] [31:0] $end
  $var wire 32 } reg_array[8] [31:0] $end
  $var wire 32 ~ reg_array[9] [31:0] $end
  $var wire  1 t reset $end
  $scope module top $end
   $var wire 32 5 address [31:0] $end
   $var wire  1 s clk $end
   $var wire 32 p curr_inst [31:0] $end
   $var wire  1 < en $end
   $var wire 32 7! in [31:0] $end
   $var wire 32 6 mem_wb[0] [31:0] $end
   $var wire 32 7 mem_wb[1] [31:0] $end
   $var wire 32 8 mem_wb[2] [31:0] $end
   $var wire 32 9 mem_wb[3] [31:0] $end
   $var wire 32 : mem_wb[4] [31:0] $end
   $var wire 32 @! out [31:0] $end
   $var wire 32 $ pc [31:0] $end
   $var wire  1 ; r_w $end
   $var wire 32 u reg_array[0] [31:0] $end
   $var wire 32 !! reg_array[10] [31:0] $end
   $var wire 32 "! reg_array[11] [31:0] $end
   $var wire 32 #! reg_array[12] [31:0] $end
   $var wire 32 $! reg_array[13] [31:0] $end
   $var wire 32 %! reg_array[14] [31:0] $end
   $var wire 32 &! reg_array[15] [31:0] $end
   $var wire 32 '! reg_array[16] [31:0] $end
   $var wire 32 (! reg_array[17] [31:0] $end
   $var wire 32 )! reg_array[18] [31:0] $end
   $var wire 32 *! reg_array[19] [31:0] $end
   $var wire 32 v reg_array[1] [31:0] $end
   $var wire 32 +! reg_array[20] [31:0] $end
   $var wire 32 ,! reg_array[21] [31:0] $end
   $var wire 32 -! reg_array[22] [31:0] $end
   $var wire 32 .! reg_array[23] [31:0] $end
   $var wire 32 /! reg_array[24] [31:0] $end
   $var wire 32 0! reg_array[25] [31:0] $end
   $var wire 32 1! reg_array[26] [31:0] $end
   $var wire 32 2! reg_array[27] [31:0] $end
   $var wire 32 3! reg_array[28] [31:0] $end
   $var wire 32 4! reg_array[29] [31:0] $end
   $var wire 32 w reg_array[2] [31:0] $end
   $var wire 32 5! reg_array[30] [31:0] $end
   $var wire 32 6! reg_array[31] [31:0] $end
   $var wire 32 x reg_array[3] [31:0] $end
   $var wire 32 y reg_array[4] [31:0] $end
   $var wire 32 z reg_array[5] [31:0] $end
   $var wire 32 { reg_array[6] [31:0] $end
   $var wire 32 | reg_array[7] [31:0] $end
   $var wire 32 } reg_array[8] [31:0] $end
   $var wire 32 ~ reg_array[9] [31:0] $end
   $var wire  1 t reset $end
   $scope module core $end
    $var wire  4 ` alu_op [3:0] $end
    $var wire  1 \ branch_inst $end
    $var wire  1 s clk $end
    $var wire 32 p curr_inst [31:0] $end
    $var wire  4 [ current_func [3:0] $end
    $var wire  7 ) current_opcode [6:0] $end
    $var wire  1 ^ ex_load_inst $end
    $var wire  1 _ ex_reg_dest $end
    $var wire  1 < load_inst $end
    $var wire 32 5 mem_address [31:0] $end
    $var wire  1 < mem_enable $end
    $var wire 32 7! mem_input [31:0] $end
    $var wire  1 ; mem_r_w $end
    $var wire 32 6 mem_wb[0] [31:0] $end
    $var wire 32 7 mem_wb[1] [31:0] $end
    $var wire 32 8 mem_wb[2] [31:0] $end
    $var wire 32 9 mem_wb[3] [31:0] $end
    $var wire 32 : mem_wb[4] [31:0] $end
    $var wire 32 $ pc [31:0] $end
    $var wire 32 u reg_array[0] [31:0] $end
    $var wire 32 !! reg_array[10] [31:0] $end
    $var wire 32 "! reg_array[11] [31:0] $end
    $var wire 32 #! reg_array[12] [31:0] $end
    $var wire 32 $! reg_array[13] [31:0] $end
    $var wire 32 %! reg_array[14] [31:0] $end
    $var wire 32 &! reg_array[15] [31:0] $end
    $var wire 32 '! reg_array[16] [31:0] $end
    $var wire 32 (! reg_array[17] [31:0] $end
    $var wire 32 )! reg_array[18] [31:0] $end
    $var wire 32 *! reg_array[19] [31:0] $end
    $var wire 32 v reg_array[1] [31:0] $end
    $var wire 32 +! reg_array[20] [31:0] $end
    $var wire 32 ,! reg_array[21] [31:0] $end
    $var wire 32 -! reg_array[22] [31:0] $end
    $var wire 32 .! reg_array[23] [31:0] $end
    $var wire 32 /! reg_array[24] [31:0] $end
    $var wire 32 0! reg_array[25] [31:0] $end
    $var wire 32 1! reg_array[26] [31:0] $end
    $var wire 32 2! reg_array[27] [31:0] $end
    $var wire 32 3! reg_array[28] [31:0] $end
    $var wire 32 4! reg_array[29] [31:0] $end
    $var wire 32 w reg_array[2] [31:0] $end
    $var wire 32 5! reg_array[30] [31:0] $end
    $var wire 32 6! reg_array[31] [31:0] $end
    $var wire 32 x reg_array[3] [31:0] $end
    $var wire 32 y reg_array[4] [31:0] $end
    $var wire 32 z reg_array[5] [31:0] $end
    $var wire 32 { reg_array[6] [31:0] $end
    $var wire 32 | reg_array[7] [31:0] $end
    $var wire 32 } reg_array[8] [31:0] $end
    $var wire 32 ~ reg_array[9] [31:0] $end
    $var wire  1 ; reg_dest $end
    $var wire  1 ] reg_reg_inst $end
    $var wire  1 t reset $end
    $scope module cu $end
     $var wire  4 ` alu_op [3:0] $end
     $var wire  1 \ branch_inst $end
     $var wire  1 s clk $end
     $var wire  4 [ current_func [3:0] $end
     $var wire  7 ) current_opcode [6:0] $end
     $var wire  1 ^ ex_load_inst $end
     $var wire  1 _ ex_reg_dest $end
     $var wire  1 < load_inst $end
     $var wire  1 ; reg_dest $end
     $var wire  1 ] reg_reg_inst $end
     $var wire  1 t reset $end
    $upscope $end
    $scope module dp $end
     $var wire  4 ` alu_op [3:0] $end
     $var wire  1 \ branch_inst $end
     $var wire  1 A! branch_taken $end
     $var wire  1 s clk $end
     $var wire 32 p curr_inst [31:0] $end
     $var wire  4 [ current_func [3:0] $end
     $var wire  7 ) current_opcode [6:0] $end
     $var wire  1 B enable $end
     $var wire  1 ^ ex_load_inst $end
     $var wire 32 = ex_mem[0] [31:0] $end
     $var wire 32 > ex_mem[1] [31:0] $end
     $var wire 32 ? ex_mem[2] [31:0] $end
     $var wire 32 @ ex_mem[3] [31:0] $end
     $var wire  1 _ ex_reg_dest $end
     $var wire  1 X f_en $end
     $var wire  1 a f_rs1[0] $end
     $var wire  1 b f_rs1[1] $end
     $var wire  1 S f_rs2[0] $end
     $var wire  1 T f_rs2[1] $end
     $var wire  1 U f_rs2[2] $end
     $var wire  1 V f_rs2[3] $end
     $var wire 32 c fwd_1 [31:0] $end
     $var wire 32 d fwd_2 [31:0] $end
     $var wire 32 * id_ex[0] [31:0] $end
     $var wire 32 + id_ex[1] [31:0] $end
     $var wire 32 , id_ex[2] [31:0] $end
     $var wire 32 - id_ex[3] [31:0] $end
     $var wire 32 . id_ex[4] [31:0] $end
     $var wire 32 8! if_id[0] [31:0] $end
     $var wire 32 9! if_id[1] [31:0] $end
     $var wire  1 < load_inst $end
     $var wire 32 5 mem_address [31:0] $end
     $var wire  1 < mem_enable $end
     $var wire 32 7! mem_input [31:0] $end
     $var wire  1 ; mem_r_w $end
     $var wire 32 6 mem_wb[0] [31:0] $end
     $var wire 32 7 mem_wb[1] [31:0] $end
     $var wire 32 8 mem_wb[2] [31:0] $end
     $var wire 32 9 mem_wb[3] [31:0] $end
     $var wire 32 : mem_wb[4] [31:0] $end
     $var wire 32 $ pc [31:0] $end
     $var wire 32 B! pc_offset_branch [31:0] $end
     $var wire 32 u reg_array[0] [31:0] $end
     $var wire 32 !! reg_array[10] [31:0] $end
     $var wire 32 "! reg_array[11] [31:0] $end
     $var wire 32 #! reg_array[12] [31:0] $end
     $var wire 32 $! reg_array[13] [31:0] $end
     $var wire 32 %! reg_array[14] [31:0] $end
     $var wire 32 &! reg_array[15] [31:0] $end
     $var wire 32 '! reg_array[16] [31:0] $end
     $var wire 32 (! reg_array[17] [31:0] $end
     $var wire 32 )! reg_array[18] [31:0] $end
     $var wire 32 *! reg_array[19] [31:0] $end
     $var wire 32 v reg_array[1] [31:0] $end
     $var wire 32 +! reg_array[20] [31:0] $end
     $var wire 32 ,! reg_array[21] [31:0] $end
     $var wire 32 -! reg_array[22] [31:0] $end
     $var wire 32 .! reg_array[23] [31:0] $end
     $var wire 32 /! reg_array[24] [31:0] $end
     $var wire 32 0! reg_array[25] [31:0] $end
     $var wire 32 1! reg_array[26] [31:0] $end
     $var wire 32 2! reg_array[27] [31:0] $end
     $var wire 32 3! reg_array[28] [31:0] $end
     $var wire 32 4! reg_array[29] [31:0] $end
     $var wire 32 w reg_array[2] [31:0] $end
     $var wire 32 5! reg_array[30] [31:0] $end
     $var wire 32 6! reg_array[31] [31:0] $end
     $var wire 32 x reg_array[3] [31:0] $end
     $var wire 32 y reg_array[4] [31:0] $end
     $var wire 32 z reg_array[5] [31:0] $end
     $var wire 32 { reg_array[6] [31:0] $end
     $var wire 32 | reg_array[7] [31:0] $end
     $var wire 32 } reg_array[8] [31:0] $end
     $var wire 32 ~ reg_array[9] [31:0] $end
     $var wire  1 ; reg_dest $end
     $var wire  1 E! reg_r_w $end
     $var wire  1 ] reg_reg_inst $end
     $var wire  5 C! reg_wa [4:0] $end
     $var wire  1 t reset $end
     $var wire 32 W sb_fwd_2 [31:0] $end
     $var wire  1 :! stall $end
     $var wire  2 % stall_counter [1:0] $end
     $var wire 32 D! wa_data [31:0] $end
     $var wire 32 A write_back [31:0] $end
     $scope module fu $end
      $var wire  1 <! e_storeb_en $end
      $var wire 32 5 ex_aluout [31:0] $end
      $var wire  1 O ex_is_load $end
      $var wire 32 D ex_mem_ir [31:0] $end
      $var wire  7 H ex_op [6:0] $end
      $var wire  5 I ex_rd [4:0] $end
      $var wire  5 K ex_rs1 [4:0] $end
      $var wire  1 e ex_rs1_forward $end
      $var wire  1 ;! ex_rs1_match $end
      $var wire  5 L ex_rs2 [4:0] $end
      $var wire  1 Y ex_rs2_forward $end
      $var wire  1 i ex_rs2_match $end
      $var wire  1 X f_en $end
      $var wire  1 a f_rs1[0] $end
      $var wire  1 b f_rs1[1] $end
      $var wire  1 S f_rs2[0] $end
      $var wire  1 T f_rs2[1] $end
      $var wire  1 U f_rs2[2] $end
      $var wire  1 V f_rs2[3] $end
      $var wire  4 h fcheck [3:0] $end
      $var wire 32 c fwd_1 [31:0] $end
      $var wire 32 d fwd_2 [31:0] $end
      $var wire 32 / id_ex_ir [31:0] $end
      $var wire  7 ) id_op [6:0] $end
      $var wire  5 0 id_rs1 [4:0] $end
      $var wire  5 1 id_rs2 [4:0] $end
      $var wire  1 N m_storeb_en $end
      $var wire 32 E mem_aluout [31:0] $end
      $var wire  1 M mem_is_load $end
      $var wire 32 F mem_memout [31:0] $end
      $var wire  7 G mem_op [6:0] $end
      $var wire 32 g mem_out [31:0] $end
      $var wire  5 J mem_rd [4:0] $end
      $var wire  1 f mem_rs1_forward $end
      $var wire  1 j mem_rs1_match $end
      $var wire  1 Z mem_rs2_forward $end
      $var wire  1 k mem_rs2_match $end
      $var wire 32 C mem_wb_ir [31:0] $end
      $var wire 32 W sb_fwd_2 [31:0] $end
     $upscope $end
     $scope module regs $end
      $var wire  1 s clk $end
      $var wire  1 B neg_enable $end
      $var wire 32 =! ra_data [31:0] $end
      $var wire 32 >! rb_data [31:0] $end
      $var wire  5 0 reg_a [4:0] $end
      $var wire 32 u reg_array[0] [31:0] $end
      $var wire 32 !! reg_array[10] [31:0] $end
      $var wire 32 "! reg_array[11] [31:0] $end
      $var wire 32 #! reg_array[12] [31:0] $end
      $var wire 32 $! reg_array[13] [31:0] $end
      $var wire 32 %! reg_array[14] [31:0] $end
      $var wire 32 &! reg_array[15] [31:0] $end
      $var wire 32 '! reg_array[16] [31:0] $end
      $var wire 32 (! reg_array[17] [31:0] $end
      $var wire 32 )! reg_array[18] [31:0] $end
      $var wire 32 *! reg_array[19] [31:0] $end
      $var wire 32 v reg_array[1] [31:0] $end
      $var wire 32 +! reg_array[20] [31:0] $end
      $var wire 32 ,! reg_array[21] [31:0] $end
      $var wire 32 -! reg_array[22] [31:0] $end
      $var wire 32 .! reg_array[23] [31:0] $end
      $var wire 32 /! reg_array[24] [31:0] $end
      $var wire 32 0! reg_array[25] [31:0] $end
      $var wire 32 1! reg_array[26] [31:0] $end
      $var wire 32 2! reg_array[27] [31:0] $end
      $var wire 32 3! reg_array[28] [31:0] $end
      $var wire 32 4! reg_array[29] [31:0] $end
      $var wire 32 w reg_array[2] [31:0] $end
      $var wire 32 5! reg_array[30] [31:0] $end
      $var wire 32 6! reg_array[31] [31:0] $end
      $var wire 32 x reg_array[3] [31:0] $end
      $var wire 32 y reg_array[4] [31:0] $end
      $var wire 32 z reg_array[5] [31:0] $end
      $var wire 32 { reg_array[6] [31:0] $end
      $var wire 32 | reg_array[7] [31:0] $end
      $var wire 32 } reg_array[8] [31:0] $end
      $var wire 32 ~ reg_array[9] [31:0] $end
      $var wire  5 1 reg_b [4:0] $end
      $var wire  1 E! reg_r_w $end
      $var wire  5 J reg_wa [4:0] $end
      $var wire  1 t reset $end
      $var wire 32 P wa_data [31:0] $end
     $upscope $end
     $scope module s1 $end
      $var wire  1 Q branch_cond $end
      $var wire  1 s clk $end
      $var wire 32 p curr_inst [31:0] $end
      $var wire  1 :! hazard $end
      $var wire 32 8! if_id[0] [31:0] $end
      $var wire 32 9! if_id[1] [31:0] $end
      $var wire 32 p ir [31:0] $end
      $var wire 32 & npc [31:0] $end
      $var wire 32 $ pc [31:0] $end
      $var wire 32 5 pc_offset_branch [31:0] $end
      $var wire  1 t reset $end
      $var wire  2 % stall_counter [1:0] $end
     $upscope $end
     $scope module s2 $end
      $var wire  1 s clk $end
      $var wire  1 :! hazard $end
      $var wire 32 * id_ex[0] [31:0] $end
      $var wire 32 + id_ex[1] [31:0] $end
      $var wire 32 , id_ex[2] [31:0] $end
      $var wire 32 - id_ex[3] [31:0] $end
      $var wire 32 . id_ex[4] [31:0] $end
      $var wire 32 p if_id_ir [31:0] $end
      $var wire 32 & if_id_npc [31:0] $end
      $var wire  1 q long_immediate $end
      $var wire  1 t reset $end
     $upscope $end
     $scope module s3 $end
      $var wire 32 l alu_a [31:0] $end
      $var wire 32 m alu_b [31:0] $end
      $var wire  4 ` alu_op [3:0] $end
      $var wire 32 n alu_out [31:0] $end
      $var wire  1 \ branch_inst $end
      $var wire  1 s clk $end
      $var wire  1 ^ ex_load_inst $end
      $var wire 32 = ex_mem[0] [31:0] $end
      $var wire 32 > ex_mem[1] [31:0] $end
      $var wire 32 ? ex_mem[2] [31:0] $end
      $var wire 32 @ ex_mem[3] [31:0] $end
      $var wire  1 _ ex_reg_dest $end
      $var wire  1 X f_en $end
      $var wire  1 a f_rs1[0] $end
      $var wire  1 b f_rs1[1] $end
      $var wire  1 S f_rs2[0] $end
      $var wire  1 T f_rs2[1] $end
      $var wire  1 U f_rs2[2] $end
      $var wire  1 V f_rs2[3] $end
      $var wire 32 c fwd_1 [31:0] $end
      $var wire 32 d fwd_2 [31:0] $end
      $var wire 32 =! id_ex_a [31:0] $end
      $var wire 32 >! id_ex_b [31:0] $end
      $var wire 32 3 id_ex_imm [31:0] $end
      $var wire 32 / id_ex_ir [31:0] $end
      $var wire 32 2 id_ex_npc [31:0] $end
      $var wire 32 ?! reg_b_out [31:0] $end
      $var wire  1 ] reg_reg_inst $end
      $var wire  1 t reset $end
      $var wire 32 W sb_fwd_2 [31:0] $end
      $scope module alu $end
       $var wire 32 l alu_a [31:0] $end
       $var wire 32 m alu_b [31:0] $end
       $var wire  4 ` alu_op [3:0] $end
       $var wire 32 n alu_out [31:0] $end
       $var wire 32 2 pc [31:0] $end
      $upscope $end
     $upscope $end
     $scope module s4 $end
      $var wire  1 s clk $end
      $var wire  1 ( e_sb_en $end
      $var wire 32 ' e_sb_fwd [31:0] $end
      $var wire 32 5 ex_mem_alu_output [31:0] $end
      $var wire 32 R ex_mem_b [31:0] $end
      $var wire 32 D ex_mem_ir [31:0] $end
      $var wire  1 < load_inst $end
      $var wire 32 5 mem_address [31:0] $end
      $var wire  1 < mem_enable $end
      $var wire 32 7! mem_input [31:0] $end
      $var wire  1 ; mem_r_w $end
      $var wire 32 6 mem_wb[0] [31:0] $end
      $var wire 32 7 mem_wb[1] [31:0] $end
      $var wire 32 8 mem_wb[2] [31:0] $end
      $var wire 32 9 mem_wb[3] [31:0] $end
      $var wire 32 : mem_wb[4] [31:0] $end
      $var wire 32 o reg_b_in [31:0] $end
      $var wire  1 ; reg_dest $end
      $var wire  1 t reset $end
      $var wire  1 S sb_en[0] $end
      $var wire  1 T sb_en[1] $end
      $var wire  1 U sb_en[2] $end
      $var wire  1 V sb_en[3] $end
      $var wire 32 W sb_fwd [31:0] $end
     $upscope $end
     $scope module su $end
      $var wire 32 / id_ex_ir [31:0] $end
      $var wire  5 4 id_ex_rd [4:0] $end
      $var wire 32 p if_id_ir [31:0] $end
      $var wire  5 r if_id_rs1 [4:0] $end
      $var wire  1 :! stall $end
      $var wire  2 % stall_counter [1:0] $end
     $upscope $end
    $upscope $end
   $upscope $end
   $scope module im $end
    $var wire 32 $ address [31:0] $end
    $var wire 32 p read_out [31:0] $end
   $upscope $end
   $scope module memory $end
    $var wire 32 5 address [31:0] $end
    $var wire  1 s clk $end
    $var wire  1 < en $end
    $var wire 32 # i [31:0] $end
    $var wire 32 7! in [31:0] $end
    $var wire 32 F out [31:0] $end
    $var wire  1 ; r_w $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#8
b00000000000000000000100000000000 #
b00000000000000000000000000000000 $
b00 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
0(
b0000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000 0
b00000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
0;
0<
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
0B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b0000000 G
b0000000 H
b00000 I
b00000 J
b00000 K
b00000 L
1M
0N
1O
b00000000000000000000000000000000 P
0Q
b00000000000000000000000000000000 R
0S
0T
0U
0V
b00000000000000000000000000000000 W
0X
0Y
0Z
b0000 [
0\
0]
0^
0_
b0000 `
0a
0b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
0e
0f
b00000000000000000000000000000000 g
b0000 h
0i
0j
0k
b00000000000000000000000000000000 l
b00000000000000000000000000000000 m
b00000000000000000000000000000000 n
b00000000000000000000000000000000 o
b00000000000000000000000000000000 p
0q
b00000 r
0s
0t
b00000000000000000000000000000000 u
b00000000000000000000000000000000 v
b00000000000000000000000000000000 w
b00000000000000000000000000000000 x
b00000000000000000000000000000000 y
b00000000000000000000000000000000 z
b00000000000000000000000000000000 {
b00000000000000000000000000000000 |
b00000000000000000000000000000000 }
b00000000000000000000000000000000 ~
b00000000000000000000000000000000 !!
b00000000000000000000000000000000 "!
b00000000000000000000000000000000 #!
b00000000000000000000000000000000 $!
b00000000000000000000000000000000 %!
b00000000000000000000000000000000 &!
b00000000000000000000000000000000 '!
b00000000000000000000000000000000 (!
b00000000000000000000000000000000 )!
b00000000000000000000000000000000 *!
b00000000000000000000000000000000 +!
b00000000000000000000000000000000 ,!
b00000000000000000000000000000000 -!
b00000000000000000000000000000000 .!
b00000000000000000000000000000000 /!
b00000000000000000000000000000000 0!
b00000000000000000000000000000000 1!
b00000000000000000000000000000000 2!
b00000000000000000000000000000000 3!
b00000000000000000000000000000000 4!
b00000000000000000000000000000000 5!
b00000000000000000000000000000000 6!
b00000000000000000000000000000000 7!
b00000000000000000000000000000000 8!
b00000000000000000000000000000000 9!
0:!
0;!
0<!
b00000000000000000000000000000000 =!
b00000000000000000000000000000000 >!
b00000000000000000000000000000000 ?!
b00000000000000000000000000000000 @!
0A!
b00000000000000000000000000000000 B!
b00000 C!
b00000000000000000000000000000000 D!
0E!
#10
b00000000000000000000000000000001 $
b00000000000000000000000000000100 &
b00000000000000000001111110010111 p
1q
1s
b00000000000000000001111110010111 8!
b00000000000000000000000000000100 9!
#15
0s
#18
#20
b00000000000000000000000000000010 $
b00000000000000000000000000001000 &
b0010111 )
b00000000000000000000000000000100 ,
b00000000000000000001111110010111 -
b00000000000000000000000000000001 .
b00000000000000000001111110010111 /
b00000000000000000000000000000100 2
b00000000000000000000000000000001 3
b11111 4
b0001 [
b1101 `
b00000000000000000000000000000001 m
b00000000000000000001000000000000 n
b10000000000011111000111110010011 p
0q
b11111 r
1s
b10000000000011111000111110010011 8!
b00000000000000000000000000001000 9!
#25
0s
#28
#30
b00000000000000000000000000000011 $
b00000000000000000000000000001100 &
b0010011 )
b00000000000000000000000000001000 ,
b10000000000011111000111110010011 -
b11111111111111111111100000000000 .
b10000000000011111000111110010011 /
b11111 0
b00000000000000000000000000001000 2
b11111111111111111111100000000000 3
b00000000000000000001000000000000 5
b00000000000000000001111110010111 =
b00000000000000000001000000000000 ?
b00000000000000000001111110010111 D
b0010111 H
b11111 I
0O
1X
b0000 [
b0001 `
1a
b00000000000000000001000000000000 c
1e
b1000 h
b00000000000000000001000000000000 l
b11111111111111111111100000000000 m
b00000000000000000000100000000000 n
b00000000000000000000000010010111 p
1q
b00000 r
1s
b00000000000000000000000010010111 8!
b00000000000000000000000000001100 9!
1;!
#35
0s
#38
#40
b00000000000000000000000000000100 $
b00000000000000000000000000010000 &
b0010111 )
b00000000000000000000000000001100 ,
b00000000000000000000000010010111 -
b00000000000000000000000000000000 .
b00000000000000000000000010010111 /
b00000 0
b00000000000000000000000000001100 2
b00000000000000000000000000000000 3
b00001 4
b00000000000000000000100000000000 5
b00000000000000000001111110010111 6
b00000000000000000001000000000000 7
b10000000000011111000111110010011 =
b00000000000000000000100000000000 ?
b00000000000000000001000000000000 A
b00000000000000000001111110010111 C
b10000000000011111000111110010011 D
b00000000000000000001000000000000 E
b0010111 G
b0010011 H
b11111 J
b11111 K
0M
b00000000000000000001000000000000 P
0X
b1101 `
0a
b00000000000000000000000000000000 c
0e
b0000 h
b00000000000000000000000000000000 l
b00000000000000000000000000000000 m
b00000000000000000000000000001000 n
b01111111110000001000000010010011 p
0q
b00001 r
1s
b01111111110000001000000010010011 8!
b00000000000000000000000000010000 9!
0;!
#45
0s
#48
#50
b00000000000000000000000000000101 $
b00000000000000000000000000010100 &
b0010011 )
b00000000000000000000000000010000 ,
b01111111110000001000000010010011 -
b00000000000000000000011111111100 .
b01111111110000001000000010010011 /
b00001 0
b11100 1
b00000000000000000000000000010000 2
b00000000000000000000011111111100 3
b00000000000000000000000000001000 5
b10000000000011111000111110010011 6
b00000000000000000000100000000000 7
b00000000000000000000000010010111 =
b00000000000000000000000000001000 ?
b00000000000000000000100000000000 A
b10000000000011111000111110010011 C
b00000000000000000000000010010111 D
b00000000000000000000100000000000 E
b0010011 G
b0010111 H
b00001 I
b00000 K
b00000000000000000000100000000000 P
1X
b1000 [
b0001 `
1a
b00000000000000000000000000001000 c
1e
b1000 h
b00000000000000000000000000001000 l
b00000000000000000000011111111100 m
b00000000000000000000100000000100 n
b00000000000011111010000100000011 p
b11111 r
1s
b00000000000000000001000000000000 6!
b00000000000011111010000100000011 8!
b00000000000000000000000000010100 9!
1;!
#55
0s
#58
#60
b00000000000000000000000000000110 $
b00000000000000000000000000011000 &
b0000011 )
b00000000000000000000000000010100 ,
b00000000000011111010000100000011 -
b00000000000000000000000000000000 .
b00000000000011111010000100000011 /
b11111 0
b00000 1
b00000000000000000000000000010100 2
b00000000000000000000000000000000 3
b00010 4
b00000000000000000000100000000100 5
b00000000000000000000000010010111 6
b00000000000000000000000000001000 7
b01111111110000001000000010010011 =
b00000000000000000000100000000100 ?
b00000000000000000000000000001000 A
b00000000000000000000000010010111 C
b01111111110000001000000010010011 D
b00000000000000000000000000001000 E
b0010111 G
b0010011 H
b00001 J
b00001 K
b11100 L
b00000000000000000000000000001000 P
0X
b0010 [
1^
0a
b00000000000000000000000000000000 c
0e
b0000 h
b00000000000000000000000000000000 l
b00000000000000000000000000000000 m
b00000000000000000000000000000000 n
b00000000000000000000000000000000 p
b00000 r
1s
b00000000000000000000100000000000 6!
b00000000000000000000000000000000 8!
b00000000000000000000000000011000 9!
0;!
#65
b00000000000000000000100000000000 *
b00000000000000000000100000000000 l
b00000000000000000000100000000000 n
0s
b00000000000000000000100000000000 =!
#68
#70
b00000000000000000000000000000111 $
b00000000000000000000000000011100 &
b0000000 )
b00000000000000000000000000011000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 /
b00000 0
b00000000000000000000000000011000 2
b00000 4
b00000000000000000000100000000000 5
b01111111110000001000000010010011 6
b00000000000000000000100000000100 7
1<
b00000000000011111010000100000011 =
b00000000000000000000100000000000 ?
b00000000000000000000100000000100 A
b01111111110000001000000010010011 C
b00000000000011111010000100000011 D
b00000000000000000000100000000100 E
b0010011 G
b0000011 H
b00010 I
b11111 K
b00000 L
1O
b00000000000000000000100000000100 P
b0000 [
0^
b0000 `
b00000000000000000000000000000000 n
1s
b00000000000000000000000000001000 v
b00000000000000000000000000011100 9!
#75
b00000000000000000000000000000000 *
b00000000000000000000000000000000 l
0s
b00000000000000000000000000000000 =!
#78
#80
b00000000000000000000000000001000 $
b00000000000000000000000000100000 &
b00000000000000000000000000011100 ,
b00000000000000000000000000011100 2
b00000000000000000000000000000000 5
b00000000000011111010000100000011 6
b00000000000000000000100000000000 7
b00000000000000010000111100101100 8
b00000000000000000000000000000001 9
0<
b00000000000000000000000000000000 =
b00000000000000000000000000000000 ?
b00000000000000000000000000000001 A
b00000000000011111010000100000011 C
b00000000000000000000000000000000 D
b00000000000000000000100000000000 E
b00000000000000010000111100101100 F
b0000011 G
b0000000 H
b00000 I
b00010 J
b00000 K
1M
b00000000000000010000111100101100 P
1s
b00000000000000000000100000000100 v
b00000000000000000000000000100000 9!
#85
0s
#88
#90
b00000000000000000000000000001001 $
b00000000000000000000000000100100 &
b00000000000000000000000000100000 ,
b00000000000000000000000000100000 2
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 A
b00000000000000000000000000000000 C
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b0000000 G
b00000 J
b00000000000000000000000000000000 P
1s
b00000000000000010000111100101100 w
b00000000000000000000000000100100 9!
#95
0s
#98
#100
b00000000000000000000000000001010 $
b00000000000000000000000000101000 &
b00000000000000000000000000100100 ,
b00000000000000000000000000100100 2
1s
b00000000000000000000000000101000 9!
#105
0s
#108
#110
b00000000000000000000000000001011 $
b00000000000000000000000000101100 &
b00000000000000000000000000101000 ,
b00000000000000000000000000101000 2
1s
b00000000000000000000000000101100 9!
#115
0s
#118
#120
b00000000000000000000000000001100 $
b00000000000000000000000000110000 &
b00000000000000000000000000101100 ,
b00000000000000000000000000101100 2
1s
b00000000000000000000000000110000 9!
#125
0s
#128
#130
b00000000000000000000000000001101 $
b00000000000000000000000000110100 &
b00000000000000000000000000110000 ,
b00000000000000000000000000110000 2
1s
b00000000000000000000000000110100 9!
#135
0s
#138
#140
b00000000000000000000000000001110 $
b00000000000000000000000000111000 &
b00000000000000000000000000110100 ,
b00000000000000000000000000110100 2
1s
b00000000000000000000000000111000 9!
#145
0s
#148
#150
b00000000000000000000000000001111 $
b00000000000000000000000000111100 &
b00000000000000000000000000111000 ,
b00000000000000000000000000111000 2
1s
b00000000000000000000000000111100 9!
#155
0s
#158
#160
b00000000000000000000000000010000 $
b00000000000000000000000001000000 &
b00000000000000000000000000111100 ,
b00000000000000000000000000111100 2
1s
b00000000000000000000000001000000 9!
#165
0s
#168
#170
b00000000000000000000000000010001 $
b00000000000000000000000001000100 &
b00000000000000000000000001000000 ,
b00000000000000000000000001000000 2
1s
b00000000000000000000000001000100 9!
#175
0s
#178
#180
b00000000000000000000000000010010 $
b00000000000000000000000001001000 &
b00000000000000000000000001000100 ,
b00000000000000000000000001000100 2
1s
b00000000000000000000000001001000 9!
#185
0s
#188
#190
b00000000000000000000000000010011 $
b00000000000000000000000001001100 &
b00000000000000000000000001001000 ,
b00000000000000000000000001001000 2
1s
b00000000000000000000000001001100 9!
#195
0s
#198
#200
b00000000000000000000000000010100 $
b00000000000000000000000001010000 &
b00000000000000000000000001001100 ,
b00000000000000000000000001001100 2
1s
b00000000000000000000000001010000 9!
#205
0s
#208
#210
b00000000000000000000000000010101 $
b00000000000000000000000001010100 &
b00000000000000000000000001010000 ,
b00000000000000000000000001010000 2
1s
b00000000000000000000000001010100 9!
#215
0s
#218
#220
b00000000000000000000000000010110 $
b00000000000000000000000001011000 &
b00000000000000000000000001010100 ,
b00000000000000000000000001010100 2
1s
b00000000000000000000000001011000 9!
#225
0s
#228
#230
b00000000000000000000000000010111 $
b00000000000000000000000001011100 &
b00000000000000000000000001011000 ,
b00000000000000000000000001011000 2
1s
b00000000000000000000000001011100 9!
#235
0s
#238
#240
b00000000000000000000000000011000 $
b00000000000000000000000001100000 &
b00000000000000000000000001011100 ,
b00000000000000000000000001011100 2
1s
b00000000000000000000000001100000 9!
#245
0s
#248
#250
b00000000000000000000000000011001 $
b00000000000000000000000001100100 &
b00000000000000000000000001100000 ,
b00000000000000000000000001100000 2
1s
b00000000000000000000000001100100 9!
#255
0s
#258
#260
b00000000000000000000000000011010 $
b00000000000000000000000001101000 &
b00000000000000000000000001100100 ,
b00000000000000000000000001100100 2
1s
b00000000000000000000000001101000 9!
#265
0s
#268
#270
b00000000000000000000000000011011 $
b00000000000000000000000001101100 &
b00000000000000000000000001101000 ,
b00000000000000000000000001101000 2
1s
b00000000000000000000000001101100 9!
#275
0s
#278
#280
b00000000000000000000000000011100 $
b00000000000000000000000001110000 &
b00000000000000000000000001101100 ,
b00000000000000000000000001101100 2
1s
b00000000000000000000000001110000 9!
#285
0s
#288
#290
b00000000000000000000000000011101 $
b00000000000000000000000001110100 &
b00000000000000000000000001110000 ,
b00000000000000000000000001110000 2
1s
b00000000000000000000000001110100 9!
#295
0s
#298
#300
b00000000000000000000000000011110 $
b00000000000000000000000001111000 &
b00000000000000000000000001110100 ,
b00000000000000000000000001110100 2
1s
b00000000000000000000000001111000 9!
#305
0s
#308
#310
b00000000000000000000000000011111 $
b00000000000000000000000001111100 &
b00000000000000000000000001111000 ,
b00000000000000000000000001111000 2
1s
b00000000000000000000000001111100 9!
#315
0s
#318
#320
b00000000000000000000000000100000 $
b00000000000000000000000010000000 &
b00000000000000000000000001111100 ,
b00000000000000000000000001111100 2
1s
b00000000000000000000000010000000 9!
#325
0s
#328
#330
b00000000000000000000000000100001 $
b00000000000000000000000010000100 &
b00000000000000000000000010000000 ,
b00000000000000000000000010000000 2
1s
b00000000000000000000000010000100 9!
#335
0s
#338
#340
b00000000000000000000000000100010 $
b00000000000000000000000010001000 &
b00000000000000000000000010000100 ,
b00000000000000000000000010000100 2
1s
b00000000000000000000000010001000 9!
#345
0s
#348
#350
b00000000000000000000000000100011 $
b00000000000000000000000010001100 &
b00000000000000000000000010001000 ,
b00000000000000000000000010001000 2
1s
b00000000000000000000000010001100 9!
#355
0s
#358
#360
b00000000000000000000000000100100 $
b00000000000000000000000010010000 &
b00000000000000000000000010001100 ,
b00000000000000000000000010001100 2
1s
b00000000000000000000000010010000 9!
#365
0s
#368
#370
b00000000000000000000000000100101 $
b00000000000000000000000010010100 &
b00000000000000000000000010010000 ,
b00000000000000000000000010010000 2
1s
b00000000000000000000000010010100 9!
#375
0s
#378
#380
b00000000000000000000000000100110 $
b00000000000000000000000010011000 &
b00000000000000000000000010010100 ,
b00000000000000000000000010010100 2
1s
b00000000000000000000000010011000 9!
#385
0s
#388
#390
b00000000000000000000000000100111 $
b00000000000000000000000010011100 &
b00000000000000000000000010011000 ,
b00000000000000000000000010011000 2
1s
b00000000000000000000000010011100 9!
#395
0s
#398
#400
b00000000000000000000000000101000 $
b00000000000000000000000010100000 &
b00000000000000000000000010011100 ,
b00000000000000000000000010011100 2
1s
b00000000000000000000000010100000 9!
#405
0s
